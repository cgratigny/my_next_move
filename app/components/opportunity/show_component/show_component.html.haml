%turbo-frame{:id => "#{dom_id opportunity}", target: :_top }
  .card.text-xs.h-full{:id => "#{dom_id opportunity}"}
    .opportunity-head.leading-6
      .flex
        .status-container.grow
          %span.status-body{ class: opportunity.state.tailwind_class}
            = link_to [:opportunities, { state: opportunity.state.to_s } ] do
              = opportunity.state.text
          - if opportunity.state.interested?
            = button_to opportunity, method: :patch, data: { turbo_frame: dom_id(opportunity) }, params: { opportunity: { state: :application_submitted }}, form: { class: "inline" } do
              = heroicon(:play, size: 15, variant: :micro, class: "pb-0.5 inline border-l border-gray-700" )
          = render Opportunity::ChooseStateComponent.new(opportunity: opportunity)

        .rating
          - OpportunityRating.selectable.each do |rating|
            = button_to opportunity, method: :patch, data: { turbo_frame: dom_id(opportunity) }, params: { opportunity: { rating: }}, form: { class: :inline } do
              - if rating.to_i <= opportunity.rating.to_i
                %span= heroicon(:fire, variant: :micro, size: 12, class: "m-[-1px] p-[-1px] inline text-orange-700")
              - else
                %span= heroicon(:fire, variant: :micro, size: 12, class: "m-[-1px] p-[-1px] inline text-slate-200 dark:text-slate-700")

      %div.text-l.text-slate-700.text-xs.dark:text-slate-200.font-semibold
        - if opportunity.metrics_enabled?
          = link_to [opportunity.move, :opportunity_metrics] do
            = "##{opportunity.ranking}."

        = link_to opportunity, data: { turbo_frame: :_top } do
          = highlight opportunity.name, params[:search]
        - if opportunity.uri.present?
          %span
            = link_to opportunity.uri, target: :_blank do
              = heroicon "arrow-top-right-on-square", size: 18, class: "pb-0.5 inline"
        = link_to [:edit, opportunity], data: { turbo_frame: :_top } do
          = heroicon "cog-6-tooth", size: 18, class: "pb-0.5 inline"

        - if opportunity.metrics_enabled?
          = link_to [opportunity.move, :opportunity_metrics] do
            = heroicon("chart-bar-square", size: 18, class: "inline")


      - opportunity.tags.each.with_index(1) do |tag, index|
        - if index == 1
          = heroicon(:tag, size: 12, class: "inline")
        = link_to [:opportunities, { search: tag.to_s } ] do
          %span.bg-slate-200.dark:bg-slate-700.rounded{ class: "p-0.5" }= tag

    .opportunity-body
      .title.mb-2.mt-2
        %div
          = render opportunity.company

      - unless show?
        %span.text-xs= pluralize(opportunity.tasks_count, "Task")
        = " | "
        %span.text-xs= pluralize(opportunity.notes_count, "Note")

      %br
      Added
      = opportunity.created_at.to_fs

- if show?
  .grid.grid-cols-2.gap-4.md:grid-cols-2.mt-4
    .card.h-full
      .flex.border-b.border-slate-200.pb-1.mb-4
        .title.grow
          = render(Primer::Beta::Heading.new(tag: :h3)) { "Notes" }
        .button
          = link_to [:new, opportunity, :note], data: { turbo_frame: :new_note } do
            = render(Primer::Beta::Button.new(scheme: :primary, type: :button)) { "Add Note"}
            
      %turbo-frame{ id: dom_id(Note.new) }
      = render "notes/list", notes: opportunity.notes.reverse_chronological

    .card.h-full
      .flex.border-b.border-slate-200.pb-1.mb-4
        .title.grow
          = render(Primer::Beta::Heading.new(tag: :h3)) { "Tasks" }
        .button
          = link_to [:new, opportunity, :task], data: { turbo_frame: :new_task } do
            = render(Primer::Beta::Button.new(scheme: :primary, type: :button)) { "Add Task"}

      %turbo-frame{ id: dom_id(Task.new) }
      = render "tasks/list", tasks: opportunity.tasks
      
